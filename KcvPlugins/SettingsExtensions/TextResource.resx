<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DoubleClick" xml:space="preserve">
    <value>双击</value>
  </data>
  <data name="Exit_Msg_Button_No" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="Exit_Msg_Button_Yes" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="Exit_Msg_Content" xml:space="preserve">
    <value>确定关闭 KanColleViewer？ ( ° △ °|||)</value>
  </data>
  <data name="Exit_Msg_Title" xml:space="preserve">
    <value>KanColleViewer</value>
  </data>
  <data name="Hotkey_Is_Already_Registered" xml:space="preserve">
    <value>已经注册过的热键</value>
  </data>
  <data name="NotifyIcon_ContextMenu_Exit" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="NotifyIcon_ContextMenu_Hide" xml:space="preserve">
    <value>隐藏KanColleViewer</value>
  </data>
  <data name="NotifyIcon_ContextMenu_Show" xml:space="preserve">
    <value>显示KanColleViewer</value>
  </data>
  <data name="Plugin_ToolName" xml:space="preserve">
    <value>功能拓展</value>
  </data>
  <data name="Registration_HotKey_Failure" xml:space="preserve">
    <value>注册热键失败</value>
  </data>
  <data name="Tool_Enable_ExitTip_CheckBox" xml:space="preserve">
    <value>是否在关闭kcv时提示？</value>
  </data>
  <data name="Tool_Enable_ExitTip_Title" xml:space="preserve">
    <value>退出提醒【防手滑 (*゜ロ゜)ノ】</value>
  </data>
  <data name="Tool_Enable_Hotkey_CheckBox" xml:space="preserve">
    <value>启用 隐藏/显示 kcv 的热键</value>
  </data>
  <data name="Tool_Enable_Hotkey_Title" xml:space="preserve">
    <value>启用热键【老板键 (σﾟ∀ﾟ)σ】</value>
  </data>
  <data name="Tool_Enable_NotifyIcon_CheckBox" xml:space="preserve">
    <value>是否将kcv添加到系统托盘？</value>
  </data>
  <data name="Tool_Enable_NotifyIcon_Title" xml:space="preserve">
    <value>启用托盘【不用担心被老板发现任务栏的kcv了 (￣ε(#￣)☆】</value>
  </data>
  <data name="Tool_Enable_WindowMiniHideTaskbar_CheckBox" xml:space="preserve">
    <value>kcv最小化的时候是否隐藏任务栏上的kcv（需要启用托盘）</value>
  </data>
  <data name="Tool_Enable_WindowMiniHideTaskbar_Title" xml:space="preserve">
    <value>最小化时隐藏任务栏</value>
  </data>
  <data name="Tool_Hotkey_Set_Confirm" xml:space="preserve">
    <value>修改</value>
  </data>
  <data name="Tool_Hotkey_Set_Reset" xml:space="preserve">
    <value>重置</value>
  </data>
  <data name="Tool_Hotkey_Set_Tip" xml:space="preserve">
    <value>请在下面文本框按下想要设定的热键组合</value>
  </data>
  <data name="Tool_WindowsTheme_AccentColor" xml:space="preserve">
    <value>前景色</value>
  </data>
  <data name="Tool_WindowsTheme_ThemeColor" xml:space="preserve">
    <value>背景色</value>
  </data>
  <data name="Tool_WindowsTheme_Title" xml:space="preserve">
    <value>设置kcv的窗口颜色主题</value>
  </data>
  <data name="Tool_WindowViewType_Title" xml:space="preserve">
    <value>设置工具栏位置</value>
  </data>
</root>